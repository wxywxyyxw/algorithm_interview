__author__ = 'wangxiaoyang'
"""
31 | 深度和广度优先搜索：如何找出社交网络中的三度好友关系？
一.图的搜索算法：在图中找出从一个顶点出发，到另一个顶点的路径
二.广度优先搜索（BFS）
原理和特点：“地毯式”层层推进的搜索策略，即先查找离起始顶点最近的，然后是次近的，依次往外搜索。

时间复杂度：
①时间复杂度是 O(V+E)，其中，V 表示顶点的个数，E 表示边的个数
②对于一个连通图来说(一个图中的所有顶点都是连通的)，E 肯定要大于等于 V-1，所以时间复杂度可以简写为 O(E)
是否原地：非原地，空间复杂度O(V)
代码实现：
①visited 是用来记录已经被访问的顶点，用来避免顶点被重复访问。如果顶点 q 被访问，那相应的 visited[q] 会被设置为 true。
②queue 是一个队列，用来存储已经被访问、但相连的顶点还没有被访问的顶点。因为广度优先搜索是逐层访问的，也就是说只有把第 k 层的顶点都访问完成之后，才能访问第 k+1 层的顶点。当访问到第 k 层的顶点的时候，需要把第 k 层的顶点记录下来，稍后才能通过第 k 层的顶点来找第 k+1 层的顶点。所以用这个队列来实现记录的功能。
③prev 用来记录搜索路径。当从顶点 s 开始，广度优先搜索到顶点 t 后，prev 数组中存储的就是搜索的路径。不过，这个路径是反向存储的。prev[w] 存储的是，顶点 w 是从哪个前驱顶点遍历过来的。比如通过顶点 2 的邻接表访问到顶点 3，那 prev[3] 就等于 2。为了正向打印出路径需要递归地来打印

二.深度优先搜索（DFS）
原理和特点：
①原理：类似“走迷宫”，假设你站在迷宫的某个岔路口，然后想找到出口；随意选择一个岔路口来走，走着走着发现走不通的时候，你就回退到上一个岔路口，重新选择一条路继续走，直到最终找到出口，利用了回溯思想。
②特点：深度优先搜索找出来的路径，并不是顶点 s 到顶点 t 的最短路径

时间复杂度：时间复杂度是 O(E)，E 表示边的个数(每条边最多会被访问两次，一次是遍历，一次是回退)
是否原地：非原地，空间复杂度 O(V)，visited、prev 消耗内存大小和顶点的个数 V 成正比，递归调用栈的最大深度不会超过顶点的个数
"""
