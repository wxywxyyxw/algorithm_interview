__author__ = 'wangxiaoyang'
"""
21 哈希算法（上）：如何防止数据库中的用户信息被脱库？
哈希算法的定义和原理非常简单，基本上一句话就可以概括了。将任意长度的二进制值串映射为固定长度的二进制值串，这个映射的规则就是哈希算法

哈希算法需要满足的几点要求：
从哈希值不能反向推导出原始数据（所以哈希算法也叫单向哈希算法）； 单向
对输入数据非常敏感，哪怕原始数据只修改了一个 Bit，最后得到的哈希值也大不相同；敏感
散列冲突的概率要很小，对于不同的原始数据，哈希值相同的概率非常小；冲突小
哈希算法的执行效率要尽量高效，针对较长的文本，也能快速地计算出哈希值   高效

应用一：安全加密
最常用于加密的哈希算法是 MD5（MD5 Message-Digest Algorithm，MD5 消息摘要算法）和 SHA（Secure Hash Algorithm，安全散列算法）。
除了这两个之外，当然还有很多其他加密算法，比如 DES（Data Encryption Standard，数据加密标准）、
AES（Advanced Encryption Standard，高级加密标准）

应用二：唯一标识
我们可以给每一个图片取一个唯一标识，或者说信息摘要。比如，我们可以从图片的二进制码串开头取 100 个字节，从中间取 100 个字节，
从最后再取 100 个字节，然后将这 300 个字节放到一块，通过哈希算法（比如 MD5），得到一个哈希字符串，用它作为图片的唯一标识。
通过这个唯一标识来判定图片是否在图库中

应用三：数据校验
我们通过哈希算法，对 100 个文件块分别取哈希值，并且保存在种子文件中。我们在前面讲过，哈希算法有一个特点，对数据很敏感。
只要文件块的内容有一丁点儿的改变，最后计算出的哈希值就会完全不同。所以，当文件块下载完成之后，我们可以通过相同的哈希算法，
对下载好的文件块逐一求哈希值，然后跟种子文件中保存的哈希值比对。如果不同，说明这个文件块不完整或者被篡改了，
需要再重新从其他宿主机器上下载这个文件块

应用四：散列函数
散列函数中用到的散列算法，更加关注散列后的值是否能平均分布，也就是，一组数据是否能均匀地散列在各个槽中。除此之外，散列函数执行的快慢，
也会影响散列表的性能，所以，散列函数用的散列算法一般都比较简单，比较追求效率
"""
