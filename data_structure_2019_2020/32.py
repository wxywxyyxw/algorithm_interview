__author__ = 'wangxiaoyang'
"""
32 | 字符串匹配基础（上）：如何借助哈希算法实现高效字符串匹配？

BF 算法和 RK 算法
这两个算法是单模式串匹配的算法，也就是一个串跟一个串进行匹配

BF 算法中的 BF 是 Brute Force 的缩写，中文叫作暴力匹配算法，也叫朴素匹配算法
BF 算法的思想可以用一句话来概括，那就是，我们在主串中，检查起始位置分别是 0、1、2…n-m 且长度为 m 的 n-m+1 个子串，看有没有跟模式串匹配的
我们每次都比对 m 个字符，要比对 n-m+1 次，所以，这种算法的最坏情况时间复杂度是 O(n*m)

RK 算法的全称叫 Rabin-Karp 算法
RK 算法的思路是这样的：我们通过哈希算法对主串中的 n-m+1 个子串分别求哈希值，然后逐个与模式串的哈希值比较大小。
如果某个子串的哈希值与模式串相等，那就说明对应的子串和模式串匹配了。

整个 RK 算法包含两部分：计算子串哈希值和模式串哈希值与子串哈希值之间的比较。
第一部分，我们前面也分析了，可以通过设计特殊的哈希算法，只需要扫描一遍主串就能计算出所有子串的哈希值了，所以这部分的时间复杂度是 O(n)。
模式串哈希值与每个子串哈希值之间的比较的时间复杂度是 O(1)，总共需要比较 n-m+1 个子串的哈希值，所以，这部分的时间复杂度也是 O(n)。
所以，RK 算法整体的时间复杂度就是 O(n)。

hash冲突的解决方法很简单。当我们发现一个子串的哈希值跟模式串的哈希值相等的时候，我们只需要再对比一下子串和模式串本身就好了。

"""
