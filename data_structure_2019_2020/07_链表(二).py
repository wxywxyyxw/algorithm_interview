__author__ = 'wangxiaoyang'
"""
07 链表（下）：如何轻松写出正确的链表代码
经常用来检查链表代码是否正确的边界条件有这样几个：
    如果链表为空时，代码是否能正常工作？
    如果链表只包含一个结点时，代码是否能正常工作？
    如果链表只包含两个结点时，代码是否能正常工作？
    代码逻辑在处理头结点和尾结点的时候，是否能正常工作？

5 个常见的链表操作
    单链表反转
        1) 就地反转

        2) 新建链表，头节点插入法
        https://www.cnblogs.com/mwl523/p/10749144.html


    链表中环的检测

        快慢指针法
        这是最常见的方法。思路就是有两个指针P1和P2，同时从头结点开始往下遍历链表中的所有节点。

        P1是慢指针，一次遍历一个节点。
        P2是快指针，一次遍历两个节点。

        如果链表中没有环，P2和P1会先后遍历完所有的节点。

        如果链表中有环，P2和P1则会先后进入环中，一直循环，并一定会在在某一次遍历中相遇。

        因此，只要发现P2和P1相遇了，就可以判定链表中存在环。
        ————————————————
        版权声明：本文为CSDN博主「Tao的博客」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。
        原文链接：https://blog.csdn.net/wanf425/article/details/83048761

    两个有序的链表合并

        用两个指针同时遍历两个有序链表L1，L2，并且比较每次读取的两个链表元素的数值，将其中的小(大)值插入到新的链表L中。
        考虑到其中链表L1（或者L2）由于元素少，而被先遍历完，另个链表L2（或者L1)直接接在新的链表L表尾；

    删除链表倒数第 n 个结点

        双指针法 第二个指针在第一个指针n步之后开始遍历。当第一个指针到达链表尾部时，第二个指针指向的就是倒数第n个结点。

    求链表的中间结点
        定义快慢两个指针，从头结点开始，慢指针每次向后移动一个结点，快指针每次向后移动两个结点。
        若链表有奇数个结点，当快指针指向最后一个结点时，慢指针即指向链表的中间结点。
        若链表有偶数个结点，当快指针指向 NULL 时，慢指针即指向链表的中间结点。


"""
#TODO

